<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pcl</string>
	</array>
	<key>name</key>
	<string>PPCL</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 01</string>
			<key>match</key>
			<string>\b(ACT|ADAPTM|ADAPTS|ALARM\(|AUTO|DAY|DBSWIT|DC|DCR|DEACT)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 02</string>
			<key>match</key>
			<string>\b(DEFINE|DISABL|DISALM|DISCOV|DPHONE|EMAUTO|EMFAST|EMOFF|EMON|EMSET)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 03</string>
			<key>match</key>
			<string>\b(EMSLOW|ENABLE|ENALM|ENCOV|EPHONE|FAST|HLIMIT|HOLIDA)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 04</string>
			<key>match</key>
			<string>\b(INITTO|LLIMIT|LOCAL|LOOP|MAX|MIN|NIGHT|NORMAL|OIP)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.language.PPCL</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 04</string>
			<key>match</key>
			<string>(OFF|ON)( ?\()</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 05</string>
			<key>match</key>
			<string>\b(ONPWRT|PDL|PDLDAT|PDLDPG|PDLMTR|PDLSET|RELEAS|SAMPLE)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 06</string>
			<key>match</key>
			<string>\b(SET|SLOW|SSTO|SSTOCO|STATE|TABLE|TIMAVG|TOD|TODMOD|TODSET)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 07</string>
			<key>match</key>
			<string>\b(WAIT|ATN|COM|COS|EXP|LOG|SIN|SQRT|TAN|\.ROOT\.)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 08</string>
			<key>match</key>
			<string>\b(ALMPRI|TOTAL|ALMCNT|ALMCT2|$BATT|CRTIME|DAY|DAYOFM|LINK|MONTH)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 09</string>
			<key>match</key>
			<string>\b(NODE[0-9]|PDL|SECNDS|SECND[0-9]|TIME|ALMACK|AUTO|DEAD|LOW)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture reserved words in PPCL, list 10</string>
			<key>match</key>
			<string>\b(OK|DAYMOD|FAST|HAND|NGTMOD|SLOW)\b</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(LOCAL)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.ppcl</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>capture local point definitions and don't change them</string>
			<key>end</key>
			<string>\)</string>
			<key>match</key>
			<string>(LOCAL\(.*\))</string>
			<key>name</key>
			<string>variable.language.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Find start of code line</string>
			<key>match</key>
			<string>(?&lt;=^([0-9]{5})\t)\w+(?=\n)</string>
			<key>name</key>
			<string>line.start.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Find line numbers at start of code line</string>
			<key>match</key>
			<string>^([0-9]{5})</string>
			<key>name</key>
			<string>constant.other.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>comment</key>
			<string>Make a comment block.  not native to ppcl, but something i am adding</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(^(E|D).{,2}(U|F))</string>
			<key>comment</key>
			<string>PPCL Report - find failed or unresolved lines</string>
			<key>end</key>
			<string>(?=^E)</string>
			<key>name</key>
			<string>invalid.illegal.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(^(E|D)\s{5})</string>
			<key>comment</key>
			<string>PPCL Report - Make untraced or disabled lines, including line numbers, comments.</string>
			<key>end</key>
			<string>(?=^ET)</string>
			<key>name</key>
			<string>comment.block.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>([0-9]{5}([ ]{2,}|\t)(C|c))</string>
			<key>end</key>
			<string>($\n)</string>
			<key>match</key>
			<string>(([ ]{2,}|\t)(C|c) ?.*)</string>
			<key>name</key>
			<string>comment.block.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>capture the equipment status points and make them green</string>
			<key>end</key>
			<string>([ \)]?)</string>
			<key>match</key>
			<string>(ALARM|OFF|(PRF)?ON|START|STOP|FAILED)([ \)]?)</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>capture the priority points and make them green</string>
			<key>match</key>
			<string>(@(NONE|OPER|EMER|PDL|SMOKE))</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>match the logical operators make them red</string>
			<key>match</key>
			<string>\.(EQ|GT|LT|LE|GE|NE|N?AND|X?OR)\.</string>
			<key>name</key>
			<string>keyword.operator.comparison.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(/b)</string>
			<key>comment</key>
			<string>make the numbers purple</string>
			<key>end</key>
			<string>([ \)])</string>
			<key>match</key>
			<string>\b((\d+))(\.)?((\d+)?)|((\.)?((\d+)))\b</string>
			<key>name</key>
			<string>constant.numeric.float.ppcl</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>find GOTOs not followed by a space,number,space,newline or space,number,space,ELSE</string>
			<key>match</key>
			<string>GOTO(?!\s\d+(?:\s*\n|\s+ELSE)).*$</string>
			<key>name</key>
			<string>invalid.illegal.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>find GOSUBs not followed by a space,number,space</string>
			<key>match</key>
			<string>GOSUB(?!\s\d+\s+)</string>
			<key>name</key>
			<string>invalid.illegal.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>operators in the PPCL language, but not functions.  make them red</string>
			<key>match</key>
			<string>THEN|ELSE|GOTO|RETURN|GOSUB</string>
			<key>name</key>
			<string>keyword.control.conditional.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>operators in the PPCL language.  IF is different in that it is always followed by a (</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.conditional.PPCL</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(IF)( ?\()</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\$)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.ppcl</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.ppcl</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>capture local points and make them the same color as regular points</string>
			<key>end</key>
			<string>([ ])</string>
			<key>match</key>
			<string>(\"?\$)(?:[-a-zA-Z_0-9]*)(\"? ?)</string>
			<key>name</key>
			<string>support.constant.PPCL</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\")</string>
			<key>comment</key>
			<string>capture point names and make them orange and italic</string>
			<key>end</key>
			<string>(\")</string>
			<key>name</key>
			<string>support.other.PPCL</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.ppcl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.parameters.ppcl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\"([a-zA-Z_0-9]*)(\.)*\")</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>capture pre-APOGEE point names and make the orange and italic</string>
			<key>match</key>
			<string>(@?[a-zA-Z0-9]{2,})</string>
			<key>name</key>
			<string>variable.parameter.PPCL</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>find imroperly formatted ONPWRTs</string>
			<key>match</key>
			<string>(?&lt;=ONPWRT)(\(\d+\)(?!\s*\n)|\(.*\D+.*\)).*$</string>
			<key>name</key>
			<string>invalid.illegal.PPCL</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.PPCL</string>
	<key>uuid</key>
	<string>fac9161e-9bf4-4094-b51b-77b2c3bbd1f1</string>
</dict>
</plist>
