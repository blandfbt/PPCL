# Copyright 2017 Brien Blandford

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# [PackageDev] target_format: plist, ext: tmLanguage

---
name: PPCL
scopeName: source.PPCL
fileTypes: [pcl]
uuid: fac9161e-9bf4-4094-b51b-77b2c3bbd1f1

patterns:

- comment: capture reserved words in PPCL, list 01
  name: variable.language.PPCL
  match:  \b(ACT|ADAPTM|ADAPTS|ALARM\(|AUTO|DAY|DBSWIT|DC|DCR|DEACT)\b

- comment: capture reserved words in PPCL, list 02
  name: variable.language.PPCL
  match:  \b(DEFINE|DISABL|DISALM|DISCOV|DPHONE|EMAUTO|EMFAST|EMOFF|EMON|EMSET)\b

- comment: capture reserved words in PPCL, list 03
  name: variable.language.PPCL
  match:  \b(EMSLOW|ENABLE|ENALM|ENCOV|EPHONE|FAST|HLIMIT|HOLIDA)\b

- comment: capture reserved words in PPCL, list 04
  name: variable.language.PPCL
  match:  \b(INITTO|LLIMIT|LOCAL|LOOP|MAX|MIN|NIGHT|NORMAL|OIP)\b

- comment: capture reserved words in PPCL, list 04
  name: variable.language.PPCL
  match:  (OFF|ON)( ?\()
  captures:
    '1': {name: variable.language.PPCL}

- comment: capture reserved words in PPCL, list 05
  name: variable.language.PPCL
  match:  \b(ONPWRT|PDL|PDLDAT|PDLDPG|PDLMTR|PDLSET|RELEAS|SAMPLE)\b

- comment: capture reserved words in PPCL, list 06
  name: variable.language.PPCL
  match:  \b(SET|SLOW|SSTO|SSTOCO|STATE|TABLE|TIMAVG|TOD|TODMOD|TODSET)\b

- comment: capture reserved words in PPCL, list 07
  name: variable.language.PPCL
  match:  \b(WAIT|ATN|COM|COS|EXP|LOG|SIN|SQRT|TAN|\.ROOT\.)\b

- comment: capture reserved words in PPCL, list 08
  name: variable.language.PPCL
  match:  \b(ALMPRI|TOTAL|ALMCNT|ALMCT2|$BATT|CRTIME|DAY|DAYOFM|LINK|MONTH)\b

- comment: capture reserved words in PPCL, list 09
  name: variable.language.PPCL
  match:  \b(NODE[0-9]|PDL|SECNDS|SECND[0-9]|TIME|ALMACK|AUTO|DEAD|LOW)\b

- comment: capture reserved words in PPCL, list 10
  name: variable.language.PPCL
  match:  \b(OK|DAYMOD|FAST|HAND|NGTMOD|SLOW)\b

- comment: capture local point definitions and don't change them
  name: variable.language.PPCL
  begin: (LOCAL)
  end: \)
  match:  (LOCAL\(.*\))
  captures:
    '1': {name: punctuation.separator.parameters.ppcl}

- comment: Find start of code line
  name: line.start.PPCL
  match: (?<=^([0-9]{5})\t)\w+(?=\n)

- comment: Find line numbers at start of code line
  name: constant.other.PPCL
  match: ^([0-9]{5})

- comment: Make a comment block.  not native to ppcl, but something i am adding
  name: comment.block
  begin: /\*
  end: \*/

- comment: PPCL Report - find failed or unresolved lines
  name: invalid.illegal.PPCL
  begin: (^(E|D).{,2}(U|F))
  end: (?=^E)

- comment: PPCL Report - Make untraced or disabled lines, including line numbers, comments.
  name: comment.block.PPCL
  begin: (^(E|D)\s{5})
  end: (?=^ET)

- name: comment.block.PPCL
  begin: ([0-9]{5}([ ]{2,}|\t)(C|c))
  end: ($\n)
  match: (([ ]{2,}|\t)(C|c) ?.*)

- comment: capture the equipment status points and make them green
  begin: (\b)
  end: ([ \)]?)
  match: (ALARM|OFF|(PRF)?ON|START|STOP|FAILED)([ \)]?)
  captures:
    '1': {name: entity.name.function}
    '2': {name: entity.name.function}
    
- comment: capture the priority points and make them green
  match: (@(NONE|OPER|EMER|PDL|SMOKE))
  captures:
    '1': {name: entity.name.function}
    '2': {name: entity.name.function}

- comment: match the logical operators make them red
  name: keyword.operator.comparison.PPCL
  match: \.(EQ|GT|LT|LE|GE|NE|N?AND|X?OR)\.

- comment: make the numbers purple
  name: constant.numeric.float.ppcl
  begin: (/b)
  end: ([ \)])
  match: \b((\d+))(\.)?((\d+)?)|((\.)?((\d+)))\b

- comment: find GOTOs not followed by a space,number,space,newline or space,number,space,ELSE
  name: invalid.illegal.PPCL
  match: GOTO(?!\s\d+(?:\s*\n|\s+ELSE)).*$

- comment: find GOSUBs not followed by a space,number,space
  name: invalid.illegal.PPCL
  match: GOSUB(?!\s\d+\s+)

- comment: operators in the PPCL language, but not functions.  make them red
  name: keyword.control.conditional.PPCL
  match: THEN|ELSE|GOTO|RETURN|GOSUB

- comment: operators in the PPCL language.  IF is different in that it is always followed by a (
  patterns:
  - match: (IF)( ?\()
    captures:
      '1': {name: keyword.control.conditional.PPCL}
      # '2': {name: variable.language.PPCL}

- comment: capture local points and make them the same color as regular points
  name: support.constant.PPCL
  begin: (\$)
  end: ([ ])
  match: (\"?\$)(?:[-a-zA-Z_0-9]*)(\"? ?)
  captures:
    '1': {name: punctuation.separator.parameters.ppcl}
    # '2': {name: support.constant.PPCL}
    '2': {name: punctuation.separator.parameters.ppcl}
    
- comment: capture point names and make them orange and italic
  name: support.other.PPCL
  begin: (\")
  end: (\")
  patterns:
  - match: (\"([a-zA-Z_0-9]*)(\.)*\")
    captures:
      '1': {name: variable.parameter.function.ppcl}
      '2': {name: punctuation.separator.parameters.ppcl}

- comment: capture pre-APOGEE point names and make the orange and italic
  name: variable.parameter.PPCL
  match: (@?[a-zA-Z0-9]{2,})


# - comment: match the logical operators make them red
#   name: keyword.operator.comparison.python
#   begin: (\.)
#   end: (\.)
#   patterns:
#   - match: (\.)(EQ|GT|LT|LE|GE|NE|AND|OR|NAND|XOR)(\.)
#     captures:
#       '1': {name: variable.parameter.function.ppcl}

- comment: find imroperly formatted ONPWRTs
  name: invalid.illegal.PPCL
  match: (?<=ONPWRT)(\(\d+\)(?!\s*\n)|\(.*\D+.*\)).*$

...
