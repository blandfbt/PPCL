
    # LineChanger.py is a PPCL plugin for the Sublime Text 3 text editor.
    # Copyright (C) 2016  Brien Blandford (Smith Engineering, PLLC)

    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.

    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.

    # You should have received a copy of the GNU General Public License
    # along with this program.  If not, see <http://www.gnu.org/licenses/>.

# [PackageDev] target_format: plist, ext: tmLanguage

---
name: PPCL
scopeName: source.PPCL
fileTypes: [pcl]
uuid: fac9161e-9bf4-4094-b51b-77b2c3bbd1f1

patterns:

- comment: capture reserved words in PPCL, list 01
  name: variable.language.PPCL
  match:  \b(ACT|ADAPTM|ADAPTS|ALARM\(|AUTO|DAY|DBSWIT|DC|DCR|DEACT)\b

- comment: capture reserved words in PPCL, list 02
  name: variable.language.PPCL
  match:  \b(DEFINE|DISABL|DISALM|DISCOV|DPHONE|EMAUTO|EMFAST|EMOFF|EMON|EMSET)\b

- comment: capture reserved words in PPCL, list 03
  name: variable.language.PPCL
  match:  \b(EMSLOW|ENABLE|ENALM|ENCOV|EPHONE|FAST|HLIMIT|HOLIDA)\b

- comment: capture reserved words in PPCL, list 04
  name: variable.language.PPCL
  match:  \b(INITTO|LLIMIT|LOCAL|LOOP|MAX|MIN|NIGHT|NORMAL|OIP)\b

- comment: capture reserved words in PPCL, list 04
  name: variable.language.PPCL
  match:  (OFF|ON)( ?\()
  captures:
    '1': {name: variable.language.PPCL}

- comment: capture reserved words in PPCL, list 05
  name: variable.language.PPCL
  match:  \b(ONPWRT|PDL|PDLDAT|PDLDPG|PDLMTR|PDLSET|RELEAS|SAMPLE)\b

- comment: capture reserved words in PPCL, list 06
  name: variable.language.PPCL
  match:  \b(SET|SLOW|SSTO|SSTOCO|STATE|TABLE|TIMAVG|TOD|TODMOD|TODSET)\b

- comment: capture reserved words in PPCL, list 07
  name: variable.language.PPCL
  match:  \b(WAIT|ATN|COM|COS|EXP|LOG|SIN|SQRT|TAN|\.ROOT\.)\b

- comment: capture reserved words in PPCL, list 08
  name: variable.language.PPCL
  match:  \b(ALMPRI|TOTAL|ALMCNT|ALMCT2|$BATT|CRTIME|DAY|DAYOFM|LINK|MONTH)\b

- comment: capture reserved words in PPCL, list 09
  name: variable.language.PPCL
  match:  \b(NODE[0-9]|PDL|SECNDS|SECND[0-9]|TIME|ALMACK|AUTO|DEAD|LOW)\b

- comment: capture reserved words in PPCL, list 10
  name: variable.language.PPCL
  match:  \b(OK|DAYMOD|FAST|HAND|NGTMOD|SLOW)\b

- comment: capture local point definitions and don't change them
  name: variable.language.PPCL
  begin: (LOCAL)
  end: \)
  match:  (LOCAL\(.*\))
  captures:
    '1': {name: punctuation.separator.parameters.ppcl}

- comment: Find line numbers at start of code line
  name: constant.other.PPCL
  match: ^([0-9]{5})

- comment: Make a comment block.  not native to ppcl, but something i am adding
  name: comment.block
  begin: /\*
  end: \*/

- name: comment.block.PPCL
  begin: ([0-9]{5}([ ]{2,}|\t)(C|c))
  end: ($\n)
  match: (([ ]{2,}|\t)(C|c) ?.*)

- comment: capture the equipment status points and make them green
  begin: (\b)
  end: ([ \)]?)
  match: (ALARM|OFF|(PRF)?ON|START|STOP|FAILED)([ \)]?)
  captures:
    '1': {name: entity.name.function}
    '2': {name: entity.name.function}
    
- comment: capture the priority points and make them green
  match: (@(NONE|OPER|EMER|PDL|SMOKE))
  captures:
    '1': {name: entity.name.function}
    '2': {name: entity.name.function}

- comment: match the logical operators make them red
  name: keyword.operator.comparison.python
  match: \.(EQ|GT|LT|LE|GE|NE|N?AND|X?OR)\.

- comment: make the numbers purple
  name: constant.numeric.float.ppcl
  begin: (/b)
  end: ([ \)])
  match: \b((\d+))(\.)?((\d+)?)|((\.)?((\d+)))\b

- comment: find GOTOs not followed by a space,number,space,newline or space,number,space,ELSE
  name: invalid.illegal.PPCL
  match: GOTO(?!\s\d+(?:\s*\n|\s+ELSE)).*$

- comment: find GOSUBs not followed by a space,number,space
  name: invalid.illegal.PPCL
  match: GOSUB(?!\s\d+\s+)

- comment: operators in the PPCL language, but not functions.  make them red
  name: keyword.control.PPCL
  match: THEN|ELSE|GOTO|RETURN|GOSUB

- comment: operators in the PPCL language.  IF is different in that it is always followed by a (
  patterns:
  - match: (IF)( ?\()
    captures:
      '1': {name: keyword.control.PPCL}
      # '2': {name: variable.language.PPCL}
    
- comment: capture point names and make the orange and italic
  name: variable.parameter.PPCL
  begin: (\")
  end: (\")
  patterns:
  - match: (\"([a-zA-Z_0-9]*)(\.)*\")
    captures:
      '1': {name: variable.parameter.function.ppcl}
      '2': {name: punctuation.separator.parameters.ppcl}

- comment: capture pre-APOGEE point names and make the orange and italic
  name: variable.parameter.PPCL
  match: (@?[a-zA-Z0-9]{2,})


# - comment: match the logical operators make them red
#   name: keyword.operator.comparison.python
#   begin: (\.)
#   end: (\.)
#   patterns:
#   - match: (\.)(EQ|GT|LT|LE|GE|NE|AND|OR|NAND|XOR)(\.)
#     captures:
#       '1': {name: variable.parameter.function.ppcl}

- comment: capture local points and make them the same color as regular points
  name: variable.language.PPCL
  begin: (\$)
  end: ([ ])
  match: (\$([a-zA-Z_0-9]*) ?)
  captures:
    '1': {name: variable.parameter.function.ppcl}
    '2': {name: punctuation.separator.parameters.ppcl}

- comment: find imroperly formatted ONPWRTs
  name: invalid.illegal.PPCL
  match: (?<=ONPWRT)\((.*\D+.*\)|\d+\)\[.*\])

...