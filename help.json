
{
	"COMMENT":{
		"function": "Want to comment a JSON file?  Make a key that won't be used",
		"description": "So, there are a bunch of NOT YET DEFINED entries in here.  I wanted to get them written down so there is a guide to work from.  The pop ups may inspire others to contribute.",
		"example": "you can write in this file, and commit it to the repo.  Feel free to have fun!"
	},

	"ACT": {
			"function": "ACT(line1, ..., line16)",
			"description": "Activte the line number (1 through 32,767) for up to 16 different lines in the current PPCL code.",
			"example": "ACT(1, 5, 3200, 32767) would activate lines 1, 5, 3200, and 32767."
		},

	"ADAPTM": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ADAPTS": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ALMACK": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ALARM": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ALMCNT": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ALMCT2": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ALMPRI": {
			"function": "ALMPRI(pt)",
			"description": "This function returns the alarm priority (integer values 1 through 6) of a point.",
			"example": "\"ALARM.PRIORITY\" = ALMPRI(\"ALARMED.POINT.1\" or you could do IF(ALMPRI(\"ALARMED.POINT.1\" .EQ. 1) THEN GOTO 3200"
		},
	
	"AND": {
		"function": "IF(\"POINT.1\" .AND. \"POINT.2\") THEN ...",
		"description": "If both points are TRUE or ON, then this will proceed to the then condition.  If either is FALSE, then the condition will not be met.",
		"example": "IF(\"POINT.1\" .AND. \"POINT.2\") THEN GOTO 4300\" -> If and only if both points are true, then the condition will proceed.  Otherwise, the next line will execute and trace."
		},

	"ATN": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"AUTO": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"BATT": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"COM": {
		"function": "\"POINT.1\" = COM(\"POINT.2\")",
		"description": "The complement function.  Hi, you're looking great! Actually, this produces the boolean opposite of a 0 or 1.  So, if \"POINT.2\" is equal to 1, this function would make \"POINT.1\" equal to 0.",
		"example": "\"POINT.1\" = COM(\"POINT.2\") -> If \"POINT.2\" = 1, then \"POINT.1\" will be set to 0."
		},

	"COS": {
		"function": "\"POINT.1\" = COS(\"POINT.2\")",
		"description": "The COSINE function.  Like when you can't afford NYC rent and don't make 50 times the rent in annual salary, and your parents have to sign the lease too, so that the landlord actually gives you the place! Nah, it's the Pythagorus kind of cosine.",
		"example": "\"POINT.1\" = COS(\"POINT.2\") -> If \"POINT.2\" = PI/2, then \"POINT.1\" will be set to 1."
		},

	"CRTIME": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DAY": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DAYMOD": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DAYOFM": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DBSWIT": {
			"function": "DBSWIT(type,input,low,high,pt1,...,pt12)",
			"description": "The deadband switch takes an input point, and decides whether to turn ON or OFF the points 1 through 12.  If the input rises above the high, it turns them all ON.  If it falls below the low, it turns them all OFF.  If it's in the middle of the high and low, it does nothing.  The type sets the action.  0 makes the previous statement happen.  1 reverses it, turning them all ON if the input falls below the low, and turning the all OFF if it goes above the high.",
			"example": "DBSWIT(0,\"OUTDOOR.AIR.TEMP\",50,55,\"COOLING.MODE\") would turn cooling ON if the OAT rises above 55, and off once it falls below 50. DBSWIT(1,\"OUTDOOR.AIR.TEMP\",45,50,\"HEATING.MODE\") would turn heating OFF if the OAT rises above 50, and ON once it falls below 45."
		},

	"DC": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DCR": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DEACT": {
			"function": "DEACT(line1, ..., line16)",
			"description": "Deactivte the line number (1 through 32,767) for up to 16 different lines in the current PPCL code.",
			"example": "DEACT(1, 5, 3200, 32767) would deactivate lines 1, 5, 3200, and 32767."
		},
	
	"DEAD": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DEFINE": {
			"function": "DEFINE(Abbreviation, String)",
			"description": "I personally can't stand this one.  You can replace all strings with an abbreviation in your code, making the lines shorter, but much more difficult to read.  Code is written once, read many times, so deference should be given to the reader.  There is some logic to this, in that it makes code modules more reusable, and prevents line lengths from surpassing the limit.  This editor has a keymapped function to toggle DEFINES in the code, making it easier to read",
			"example": "DEFINE(X, \"CAMPUS.BLDG1.AHU1.\")  Now, everywhere you would have had to write that out, you can replace with %X%.  So, \"%X%SPEED\" and \"%X%POWER\" mean \"CAMPUS.BLDG1.AHU1.SPEED\" and \"CAMPUS.BLDG1.AHU1.POWER\", respectively."
		},

	"DISABL": {
			"function": "DISABL(line1, ..., line16)",
			"description": "Disable the line number (1 through 32,767) for up to 16 different lines in the current PPCL code.",
			"example": "DISABL(1, 5, 3200, 32767) would disable lines 1, 5, 3200, and 32767."
		},

	"DISALM": {
		"function": "DISALM($Point1, ... ,$Point16)",
		"description": "This function disables all alarm reporting from the points listed in the function",
		"example": "DISALM($Point1, \"POINT.2\") -> This would disable alarm reporting on the local point $Point1 and the point \"Point.2\""
		},

	"DISCOV": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"DPHONE": {
			"function": "DPHONE(phonenumber1, ..., phonenumber16)",
			"description": "Disable the telephone ID number of phonenumber1 through phonenumber16 that are defined in the device.  Wow, PPCL is old-school. Now using modems!",
			"example": "DPHONE(1, 3, 5) would disable those phone numbers in a device."
		},

	"ELSE": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"EMAUTO": {
			"function": "EMAUTO(pt1,...,pt16)",
			"description": "Changes the point with possiblilities of ON/OFF/AUTO to AUTO in emergency priority.",
			"example": "EMAUTO(\"CHW.PUMP.1\") will put that point in auto."
		},

	"EMER": {
			"function": "@EMER",
			"description": "A state used for comparison.  It means the point is in emergency.",
			"example": "IF(\"PUMP.1.SS\" .EQ. @ENER) THEN GOTO 3200"
		},

	"EMFAST": {
			"function": "EMFAST(pt1,...,pt16)",
			"description": "Changes the point with possiblilities of FAST/SLOW/STOP to FAST in emergency priority.",
			"example": "EMFAST(\"CHW.PUMP.1\") will put that point in FAST and @EMER."
		},

	"EMOFF": {
			"function": "EMOFF(pt1,...,pt16) or EMOFF(priority, pt1)",
			"description": "Changes the point to OFF in emergency priority.  The other option sets pt1 to the priority given, which can be 501 (OFF in emergency priority) or 32523 (OFF in NONE priority).  Weird...",
			"example": "EMOFF(\"CHW.PUMP.1\") will put that point in OFF and @EMER.  EMOFF(32523, \"CHW.PUMP.1\") will put that point in OFF with @NONE priority."
		},

	"EMON": {
			"function": "EMON(pt1,...,pt16) or EMON(priority, pt1)",
			"description": "Changes the point to ON in emergency priority.  The other option sets pt1 to the priority given, which can be 501 (ON in emergency priority) or 32523 (ON in NONE priority).  Weird...",
			"example": "EMON(\"CHW.PUMP.1\") will put that point in ON and @EMER.  EMON(32523, \"CHW.PUMP.1\") will put that point in ON with @NONE priority."
		},

	"EMSET": {
			"function": "EMSET(value, pt1,...,pt15)",
			"description": "Changes the analog points to a value and puts them in emergency priority.",
			"example": "EMAUTO(100, \"CHW.PUMP.1.SPEED\") will put that point to 100% speed and in @EMER priority."
		},

	"EMSLOW": {
			"function": "EMSLOW(pt1,...,pt16)",
			"description": "Changes the point with possiblilities of SLOW/SLOW/STOP to SLOW in emergency priority.",
			"example": "EMSLOW(\"CHW.PUMP.1\") will put that point in SLOW and @EMER."
		},

	"ENABLE": {
			"function": "ENABL(line1, ..., line16)",
			"description": "Enable the line number (1 through 32,767) for up to 16 different lines in the current PPCL code.",
			"example": "ENABL(1, 5, 3200, 32767) would enable lines 1, 5, 3200, and 32767."
		},

	"ENALM": {
			"function": "ENALM(pt1, ..., pt16)",
			"description": "Enable the alarming of pt1 through pt16 ",
			"example": "ENALM(\"TRUMPS.AT.MAR.A.LOGA.AGAIN\") would enable the alarm for that point."
		},

	"ENCOV": {
			"function": "ENCOV(pt1, ..., pt16)",
			"description": "Enable the COV reporting of pt1 through pt16.",
			"example": "ENCOV(\"TRUMPS.AT.MAR.A.LOGA.AGAIN\") would enable the COV reporting for that point.  Watch out, tons of COVs can eat a lot of memory and communication bandwidth."
		},

	"EPHONE": {
			"function": "EPHONE(phonenumber1, ..., phonenumber16)",
			"description": "Enable the telephone ID number of phonenumber1 through phonenumber16 that are defined in the device.  Wow, PPCL is old-school. Now using modems!",
			"example": "EPHONE(1, 3, 5) would enable those phone numbers in a device."
		},

	".EQ.": {
			"function": "value1.EQ.value2",
			"description": "Return TRUE if 'value.1' equals 'value.2'",
			"example": "self explanatory"
		},

	"EXP": {
			"function": "\"POINT.1\" = EXP(\"POINT.2\")",
			"description": "The NATURAL ANTILOG function. The opposite of the LOG base e (Euler's number) function.",
			"example": "\"POINT.1\" = EXP(\"POINT.2\") -> If \"POINT.2\" = 1, then \"POINT.1\" will be set to 2.718..."
		},

	"FAILED": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"FAST": {
			"function": "FAST(pt1,...,pt16)",
			"description": "Changes the point with possiblilities of FAST/SLOW/STOP to FAST",
			"example": "FAST(\"CHW.PUMP.1\") will put that point in FAST."
		},

	"GOTO": {
			"function": "GOTO linenum",
			"description": "This is called a branch statement.  Control is given up from the sequentially following line, and given to the linenumber specified.  It is generally considered bad practice in coding to make a GOTO go up the code (going from line 3300 to line 3200 is a No No), except the case of the very end, where a GOTO sends control back to the top of the code, creating a do while loop.",
			"example": "GOTO 3200 would go to line number 3200"
		},

	"GOSUB": {
			"function": "GOSUB linenumber pt1, ..., pt15",
			"description": "This is a subroutine, called inside the current PPCL program.  This called (not a function call, notice there are no parantheses) cedes control to the linenumber, and feeds as arguments the points pt1 through pt15.  These points are referenced by their plaement in the call, not by their names explicitly.  The subroutine can span any number of lines within the program, but must RETURN at the end.  The subroutine performs its execution, modifying the parameters inside it, and returns to the line number that originally called it.",
			"example": "At line 3200, GOSUB 5000 OATEMP, OARH, OAWBT is called.  This is kind of typical for these parameters.  The code control is released to line 5000, passing OATEMP, OARH, and OAWBT to the suroutine as $ARG1, $ARG2, and $ARG3 (based on their positions, respectively).  Once the code under the subroutine executes, and the last line of the sub is reached (given by the RETURN command), the control is released back to the line that called the sub, line 3200."
		},

	".G.": {
			"function": "something .GT. something.else",
			"description": "Greater than comparision operator",
			"example": "IF(5 .GT. 3) THEN GOTO 3200 ELSE crash"
		},

	"HAND": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"HLIMIT": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"HOLIDA": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"INITTO": {
			"function": "INITTO(value, pt1, ..., pt16)",
			"description": "This function reintializes the totalization of all the points, starting them with the value given.  This is typical for something like a daily sum of kWh, where it is reintialized to 0 every morning at 12AM.",
			"example": "INITTO(0, \"DAILY.KWH\")"
		},

	"IF": {
			"function": "IF(SOMETHING compared to SOMETHING.ELSE AND/OR ...) THEN x ELSE y",
			"description": "Pretty self-explanatory. If some value compared to some other value, then proceed to condition x, else do y.  The compared piece is one of the operators (like .EQ. or .NE.) and the SOMETHINGs can be points, values, booleans, all sorts of stuff.  There can also be cinjuctions (.AND. or .OR.) and their precedence can be tested.",
			"example": "IF(\"OA.ENTHALPY\" .GE. 30 .AND. \"COOLING.MODE\" .EQ. ON) THEN GOTO 3200 ELSE \"CHW.VALVE\" = 0"
		},

	"LINK": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"LLIMIT": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},
		
	"LOCAL": {
			"function": "LOCAL(pt1...pt16)",
			"description": "Like DEFINE, I think this is a bad idea.  Local points are points where the scope is limited to just the program.  There are built in LOCAL points (called \"lokes\") $LOC1 through $LOC15, but you can define custom ones. They can be helpful, but building real, virtual points is my prefered method.  THis eliminates confusion, makes the points traceable, trendable, etc., and prevent code from being tough to read.  ",
			"example": "LOCAL(OAT, OAWBT, OARH) would make three local points ($OAT, $OAWBT, and $OARH) inside a program that can only be used by that program."
		},

	"LOG": {
		"function": "\"POINT.1\" = LOG(\"POINT.2\")",
		"description": "The NATURAL LOG function. The base e (Euler's number) LOG function.",
		"example": "\"POINT.1\" = LOG(\"POINT.2\") -> If \"POINT.2\" = 2.718..., then \"POINT.1\" will be set to 1."
		},

	"LOOP": {
			"function": "LOOP(type, input, output, setpoint, Pgain, Igain, Dgain, SampleTimer, Bias, Low, High, 0)",
			"description": "Ahh, the good old PID loop.  The type argument is forward acting (0) for raising the output when the difference between setpoint and the value goes up, down otherwise.Type 128 is reverse acting, making the output go down if the difference between the setpoint and value gets bigger, up otherwise.  Pgain is proportional gain (think difference of states in the immediate present), Igain is integral gain (think difference between states over the past), and Dgain is derrivative gain (think difference in the future states).  Dgain is tough to use if you don't know how to use it, and Pgain alone will never be happy.  Start with 1000 for P and 20 for I.  Sample timer is how often the loop samples the input and makes a decision.  Bias is where to start the output, in case the loop gets turned off then on again.  Low limit is the minimum the output will be set to, and High is the high limit.  The extra place holder must be 0, and doesn't do anything. Seriously...",
			"example": "LOOP(0, \"AHU.SAT\", \"AHU.CHW.VALVE\", \"AHU.SAT.STPT\", 1000, 20, 0, 5, 0, 20, 80, 0) This would open the CHW Valve more and more if the SAT keeps going further past setpoint.  If the SAT is below the set point, then it will close the valve.  Notice the min and max will prevent the valve from ever fully opening or closing, and are likely in percentage.  They could be in volts, depending on the valve actuator configuration.  You would use a type=128 or the same thing, but for a HHW valve."
		},

	"LOW": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	".LT.": {
			"function": "something .LT. something.else",
			"description": "Less than comparision operator",
			"example": "IF(3 .LT. 5) THEN GOTO 3200 ELSE crash"
		},

	"MAX": {
			"function": "MAX(result, pt1, ..., pt15)",
			"description": "This returns the maximum of pts 1-15 and stores the value in result.",
			"example": "MAX(\"MAX.VALUE\", $LOC3, \"ANTOHER.POINT\") would set the point \"MAX.VALUE\" to the maximum of $LOC3 and \"ANOTHER.POINT\""
		},

	"MIN": {
			"function": "MIN(result, pt1, ..., pt15)",
			"description": "This returns the minimum of pts 1-15 and stores the value in result.",
			"example": "MIN(\"MIN.VALUE\", $LOC3, \"ANTOHER.POINT\") would set the point \"MIN.VALUE\" to the minimum of $LOC3 and \"ANOTHER.POINT\""
		},

	"MONTH": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"NAND": {
		"function": "IF(\"POINT.1\" .NAND. \"POINT.2\") THEN ...",
		"description": "The NEITHER conditional. If neither one of the points is TRUE or ON, then this will proceed to the then condition.  If both are FALSE, one is TRUE, or if both are True, then the condition will not be met",
		"example": "IF(\"POINT.1\" .NAND. \"POINT.2\") THEN GOTO 4300\" -> Only if both of the points is FALSE, then the condition will proceed.  Otherwise, the next line will execute and trace."
		},
	
	"NIGHT": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"NGTMOD": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"NODE": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"NORMAL": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"OFF": {
			"function": "OFF(pt1,...,pt16).  Can also be the state OFF",
			"description": "Changes the point with possiblilities of being set to OFF to OFF.  Note FAST/SLOW/STOP points are changed to STOP.  At sOFF is a value for comparion of assignment.",
			"example": "OFF(\"CHW.PUMP.1\") will put that point in OFF."
		},

	"OIP": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"OK": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"ON": {
			"function": "ON(pt1,...,pt16). Can also be the state ON",
			"description": "Changes the point with possiblilities of being set to ON to ON.  Note FAST/SLOW/STOP points are changed to FAST.  The ON alone is a value for comparion of assignment.",
			"example": "ON(\"CHW.PUMP.1\") will put that point in ON."
		},

	"ONPWRT": {
			"function": "ONPWRT(linenumber)",
			"description": "On power return, goto linenumber. When field panel dies because of a power event, and the battery doesn't kick on, this this goes to a specific line number to resume control.  After the first cycle through the program, this line is ignored.",
			"example": "ONPWRT(3200) would skip all lines before 3200 and go to 3200 when the power flicks back on."
		},

	"OPER": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	".OR.": {
		"function": "IF(\"POINT.1\" .OR. \"POINT.2\") THEN ...",
		"description": "If either or both of the points is TRUE or ON, then this will proceed to the then condition.  If both are FALSE, then the condition will not be met",
		"example": "IF(\"POINT.1\" .OR. \"POINT.2\") THEN GOTO 4300\" -> If either or both of the points is TRUE, then the condition will proceed.  Otherwise, the next line will execute and trace."
		},

	"PDL": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"PDLDAT": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"PDLDPG": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"PDLMTR": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"PDLSET": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"PRFON": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"RELEAS": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"RETURN": {
			"function": "RETURN",
			"description": "This statement declares the end of a subroutine, and branches (cedes control to) the line of code that originally called the subroutine, having performed its action on the given arguments or the subroutine",
			"example": "A subroutine is called on line 3200, and gives control to that subroutine (say on line 5000).  The subroutine executes, and RETURN is hit, which sends control back to line 3200."
		},

	".ROOT.": {
		"function": "\"POINT.3\" = \"POINT.1\" .ROOT. \"POINT.2\"",
		"description": "The ROOT function. This takes the Nth root (\"POINT.2\") of a number (\"POINT.1\").  This takes decimal roots and numbers as well.",
		"example": "\"POINT.3\" = \"POINT.1\" .ROOT. \"POINT.2\") -> If \"POINT.2\" = 2 and \"POINT.1\" is 8, then \"POINT.3\" will be 3."
		},

	"SAMPLE": {
			"function": "SAMPLE(time) ... rest of line code",
			"description": "With the internal clock, execute this line every time seconds, otherwise skip it.  Note that it has to have code follow it.  If there should be a lot of code, use a GOTO right after it, skipping the following line, and a GOTO on the following line, skipping all the code you want executed every time it hits.  Confusing, but that's branch statements for ya.",
			"example": "SAMPLE(10) GOTO 3200 would go to line 3200 every 10 seconds."
		},

	"SECND": {
			"function": "SECND1 through SECND7",
			"description": "These are built in timers for PPCL code.  They automatically increment each second (up to 9999 seconds), and need to be (re)set in PPCL to a starting value",
			"example": "IF(\"SOMETHING.IS.ON\") the SECND1 = 0, and so the timer would be constantly reset to 0 is the something is on.  When the something is off, the timer would begin counting."
		},

	"SECNDS": {
			"function": "SECNDS = 0",
			"description": "This is a built in timer for PPCL code.  It automatically increments each second (up to 9999 seconds), and needs to be (re)set in PPCL to a starting value",
			"example": "IF(\"SOMETHING.IS.ON\") the SECNDS = 0, and so the timer would be constantly reset to 0 is the something is on.  When the something is off, the timer would begin counting."
		},

	"SET": {
			"function": "SET(value, pt1,...,pt15)",
			"description": "Sets the points 1 through 15 to the value given",
			"example": "SET(0, SECND1, SECND2, SECND3) would set all those seconds timers to 0."
		},

	"SIN": {
		"function": "\"POINT.1\" = SIN(\"POINT.2\")",
		"description": "The SINE function. The opposite over the hypotenus.",
		"example": "\"POINT.1\" = SIN(\"POINT.2\") -> If \"POINT.2\" = PI, then \"POINT.1\" will be set to 1."
		},

	"SLOW": {
			"function": "SLOW(pt1,...,pt16)",
			"description": "Changes the point with possiblilities of SLOW/SLOW/STOP to SLOW",
			"example": "SLOW(\"CHW.PUMP.1\") will put that point in SLOW."
		},

	"SMOKE": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	".SQRT.": {
		"function": "\"POINT.3\" = \"POINT.1\" .SQRT. \"POINT.2\")",
		"description": "The SQUARE ROOT function. This takes the 2th root (\"POINT.2\") of a number (\"POINT.1\").",
		"example": "\"POINT.3\" = \"POINT.1\" .SQRT. \"POINT.2\") -> If \"POINT.2\" = 2 and \"POINT.1\" is 4, then \"POINT.3\" will be 2."
		},

	"SSTO": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"SSTOCO": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"STATE": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"START": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"STOP": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"TABLE": {
		"function": "TABLE($IN, $OUT, $X1, $Y1, $X2, $Y2, ..., $X7, $Y7)",
		"description": "A table statement makes a linear interpolation between the x points and y points, given the input variable, and maps to the ouptut variable.",
		"example": "TABLE($LOC1, $LOC2, 0, 0, 10, 100) -> if $LOC1 is 0, $LOC2 would be 0.  If $LOC1 is 5, $LOC2 would be 50.  If $LOC1 is 10, $LOC2 would be 100.  Also,  if $LOC1 is -2, $LOC2 would be 0, and  if $LOC1 is 15, $LOC2 would be 100."
		},

	"TAN": {
		"function": "\"POINT.1\" = TAN(\"POINT.2\")",
		"description": "The TAN function. It get's you bronzed.  The adjacent over the opposite.",
		"example": "\"POINT.1\" = TAN(\"POINT.2\") -> If \"POINT.2\" = PI/4, then \"POINT.1\" will be set to 1."
		},

	"THEN": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"TIMAVG": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"TIME": {
			"function": "NOT YET DEFINED",
			"description": "Would you want to help?  Contribute @ https://github.com/blandfbt/PPCL",
			"example": "or email me at brien.blandford@gmail.com"
		},

	"TOD": {
			"function": "TOD(mode, recommand, time1, time2, pt1,...,pt12)",
			"description": "Time Of Day function.  This function cycles digital points (ON/OFF) based on the time of day.  The mode point can have the following values.  1: Normal Schedule, 2: Extended Schedule, 4: Shortened Schedule, 8: Weekend Schedule, and 16: Holiday Schedule.  The recommand point (0 for no, 1 for yes) will recommand the points back to wherever they shoiuld be after a power failure.  time1 is the time to send an ON command to all the points (can be military time, decimal time, a point or a $LOC), and time2 is the time to send an OFF command to all the points.",
			"example": "TOD(1, 1, 7:00, 19:00, \"AHU1.OCC.MODE\", \"AHU2.OCC.MODE\", \"AHU3.OCC.MODE\") would follow a normal schedule (like weekday schedule), send ON commands to the three occupancy mode points is the time is 7AM, and turn them all OFF when it's 7PM.  If the power goes out in the middle of the day, it will send ON when power comes back on.  If the power goes out at night, it will send OFF when the power comes back on, because the mode point is set to 1."
		},

	"TODMOD": {
			"function": "TODMOD(MondayMode,TuesdayMode,WednesdayMode,ThursdayMode,FridayMode,SaturdayMode,SundayMode,",
			"description": "This function only works for days of the week that end in DAY.  The mode point can have the following values.  1: Normal Schedule, 2: Extended Schedule, 4: Shortened Schedule, 8: Weekend Schedule, and 16: Holiday Schedule.",
			"example": "TODMOD(1, 2, 4, 8, 16, 1, 2) would make the mode normal for Monday, Extended for Tuesday, Shortened for Wednesday, Weekend for Thursday, Holiday for Friday, Normal for Saturday, and Extended for Sunday.  I don't know why you would do this, but you can."
		},

	"TODSET": {
			"function": "TODSET(mode, recommand, time1, value1, time2, value2, pt1,...,pt12)",
			"description": "Time Of Day Set function.  This function cycles analog points based on the time of day, setting them to the analog values specified.  The mode point can have the following values.  1: Normal Schedule, 2: Extended Schedule, 4: Shortened Schedule, 8: Weekend Schedule, and 16: Holiday Schedule.  The recommand point (0 for no, 1 for yes) will recommand the points back to wherever they shoiuld be after a power failure.  time1 is the time to send value1 command to all the points (can be military time, decimal time, a point or a $LOC), and time2 is the time to send value2 to all the points.",
			"example": "TOD(1, 1, 7:00, 55, 19:00, 60, \"AHU1.SAT\", \"AHU2.SAT\", \"AHU3.SAT\") would follow a normal schedule (like weekday schedule), send supply air temperature setpoints of 55.0 to the three Supply Air Temperature Setpoints if the time is 7AM, and send supply air temperature setpoints of 60.0 to the three Supply Air Temperature Setpoints when it's 7PM.  If the power goes out in the middle of the day, it will send ON when power comes back on.  If the power goes out at night, it will send OFF when the power comes back on, because the mode point is set to 1."
		},

	"TOTAL": {
			"function": "TOTAL(pt)",
			"description": "This totalizes (sums up) the given point, based on its settings for totalization.  It could be summing up the run hours, or summing up the kWh, or anything like that that needs to be aggregted",
			"example": "\"TOTAL.FAN.RH\" = TOTAL(\"AHU.FAN.1.START\")"
		},

	"XOR": {
		"function": "IF(\"POINT.1\" .XOR. \"POINT.2\") THEN ...",
		"description": "The exclusive OR.  If only one of the points is TRUE or ON, then this will proceed to the then condition.  If both are FALSE or both are TRUE, then the condition will not be met",
		"example": "IF(\"POINT.1\" .XOR. \"POINT.2\") THEN GOTO 4300\" -> If either of the points is TRUE, but not both, then the condition will proceed.  Otherwise, the next line will execute and trace."
		},

	"WAIT": {
			"function": "WAIT(time, pt1, pt2, mode)",
			"description": "This funtion waits the specified period of time (in seconds), then performs an action specified by mode.  MODE 11: When pt1 turns ON, wait *time* then turn ON pt2.  MODE 10: When pt1 turns ON, wait *time* then turn OFF pt2.  MODE 01: When pt1 turns OFF, wait *time* then turn ON pt2.  MODE 00: When pt1 turns OFF, wait *time* then turn OFF pt2.  ",
			"example": "WAIT(300, \"CH1.SS\", \"CH1.CHWV\", 00) would wait 5 minutes from turning off Chiller 1 to close its chilled water valve."
		}

	}


